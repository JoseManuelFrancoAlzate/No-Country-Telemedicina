-- USANDO psql (shell de postgress) correr inicialmente este query
CREATE DATABASE teleclinic;

--Segundo conectarse a la base de datos recien creada
\c teleclinic;


---------------------------------------------------
-- a partir de aquÃ­ se puede correr todo en bloque
---------------------------------------------------

-- Creating enums to use after
CREATE TYPE genre AS ENUM ('MALE', 'FEMALE','OTHER');

CREATE TYPE role AS ENUM ('ADMIN', 'DOCTOR', 'USER');

-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.appointments
(
    id serial NOT NULL,
    appointment_date date NOT NULL,
    attended boolean NOT NULL DEFAULT true,
    appointment_rating integer NOT NULL,
    users_id integer NOT NULL,
    doctors_id integer NOT NULL,
    CONSTRAINT appointments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.country
(
    id serial NOT NULL,
    country_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT country_pkey PRIMARY KEY (id),
    CONSTRAINT country_country_name_key UNIQUE (country_name)
);

CREATE TABLE IF NOT EXISTS public.doctors
(
    id serial NOT NULL,
    licence_number character varying(50) COLLATE pg_catalog."default",
    identification_number character varying(50) COLLATE pg_catalog."default" ,
    name character varying(50) COLLATE pg_catalog."default" ,
    last_name character varying(50) COLLATE pg_catalog."default" ,
    phone_number bigint ,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    active boolean NOT NULL DEFAULT false,
    licence_photo text COLLATE pg_catalog."default",
    profile_picture text COLLATE pg_catalog."default",
    genre character varying(50),
    birth_date date,
    biography text COLLATE pg_catalog."default",
    CONSTRAINT doctors_pkey PRIMARY KEY (id),
    CONSTRAINT doctors_email_key UNIQUE (email),
    UNIQUE (licence_number, dni)
);

CREATE TABLE IF NOT EXISTS public.doctors_specialty
(
    id serial NOT NULL,
    doctors_id serial NOT NULL,
    specialty_id serial NOT NULL,
    CONSTRAINT doctors_specialty_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.identification_type
(
    id serial NOT NULL,
    identification_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT identification_type_pkey PRIMARY KEY (id),
    CONSTRAINT identification_type_identification_name_key UNIQUE (identification_name)
);

CREATE TABLE IF NOT EXISTS public.login
(
    id serial NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    role character varying(50) NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT login_pkey PRIMARY KEY (id),
    CONSTRAINT login_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.medical_records
(
    id serial NOT NULL,
    date date NOT NULL,
    doctor_id integer NOT NULL,
    consultation_reason text COLLATE pg_catalog."default" NOT NULL,
    recomendations text COLLATE pg_catalog."default" NOT NULL,
    diagnosis text COLLATE pg_catalog."default" NOT NULL,
    users_id integer NOT NULL,
    CONSTRAINT medical_records_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.specialty
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    is_mental_care boolean NOT NULL,
    CONSTRAINT specialty_pkey PRIMARY KEY (id),
    CONSTRAINT specialty_name_key UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" ,
    last_name character varying(50) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    identification_number character varying(50) COLLATE pg_catalog."default" ,
    birth_date date ,
    profile_picture text COLLATE pg_catalog."default" DEFAULT "https://i.postimg.cc/HnCdk2YS/profile-user-pngrepo-com.png",
    genre character varying(50),
    country_id integer,
    identification_type integer ,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email),
    UNIQUE (identification_number)
);

ALTER TABLE IF EXISTS public.appointments
    ADD CONSTRAINT fk_appointments_doctors FOREIGN KEY (doctors_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.appointments
    ADD CONSTRAINT fk_appointments_users FOREIGN KEY (users_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctors_specialty
    ADD CONSTRAINT doctors_specialty_doctors_id_fkey FOREIGN KEY (doctors_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctors_specialty
    ADD CONSTRAINT doctors_specialty_specialty_id_fkey FOREIGN KEY (specialty_id)
    REFERENCES public.specialty (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.medical_records
    ADD CONSTRAINT fk_medical_records_users FOREIGN KEY (users_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.medical_records
    ADD CONSTRAINT medical_records_doctor_id_fkey FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_users_country FOREIGN KEY (country_id)
    REFERENCES public.country (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_users_identification_types FOREIGN KEY (identification_type)
    REFERENCES public.identification_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;

-- -----------------------------------------------------
-- Constraint to check doctor rating 
-- -----------------------------------------------------
ALTER TABLE appointments
ADD CONSTRAINT chk_doctor_rating CHECK ("doctor_rating" >= 1 AND "doctor_rating" <= 5);

-- -----------------------------------------------------
-- INSERTS
-- -----------------------------------------------------





-- USERS inserts
INSERT INTO users ("name", "last_name", "email", "identification_number", "birth_date", "profile_picture", "genre", "country_id", "identification_type") VALUES ('Julian', 'Penagos', 'correo@correo.com', '1061804790', '1997-11-11', NULL, 'MALE', 2, 1);

-- DOCTORS inserts
INSERT INTO "doctors" ("licence_number", "dni", "name", "last_name", "phone_number", "email", "active", "licence_photo", "profile_picture", "birth_date", "biography") VALUES ('abc123', '1061804790', 'Doctor', 'Pepito', 3166055323, 'correo@correodoctor.com', true, 'asdfasdfasdf', 'dfasdfasdfasdf', '2003-11-11', 'soy un doctor');

-- MEDICAL_RECORDS inserts
INSERT INTO "medical_records" ("date", "doctor_id", "consultation_reason", "recomendations", "diagnosis", "users_id") VALUES ('2024-05-17', 1, 'dolor de espalda', 'no sentarse tanto tiempo', 'tomar acetaminofen 1 cada 8 horas', 1);

--SPECIALTY inserts
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Dermatology', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Cardiology', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Neurology', true);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Anesthesiology', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Geriatric medicine', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Oncology', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Gastroenterology', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Ophthalmology', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ('Dentist', false);
INSERT INTO "specialty" ("name", "is_mental_care") VALUES ( 'Psychiatry', true);

-- DOCTORS_HAS_SPECIALTY inserts
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 1);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 2);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 3);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 4);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 5);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 6);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 7);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 8);
INSERT INTO "doctors_specialty" ("doctors_id", "specialty_id") VALUES (1, 9);

-- APPOINTMENTS inserts
INSERT INTO "appointments" ("appointment_date", "attended", "doctor_rating", "users_id", "doctors_id") VALUES ('2024-05-17', true, 5, 1, 1);
INSERT INTO "appointments" ("appointment_date", "attended", "doctor_rating", "users_id", "doctors_id") VALUES ('2024-05-18', true, 3, 1, 1);
INSERT INTO "appointments" ("appointment_date", "attended", "doctor_rating", "users_id", "doctors_id") VALUES ('2024-05-19', true, 4, 1, 1);
INSERT INTO "appointments" ("appointment_date", "attended", "doctor_rating", "users_id", "doctors_id") VALUES ('2024-05-20', true, 4, 1, 1);

-- LOGIN inserts
INSERT INTO login ("password", "role", "email") VALUES ('ABC123', 'DOCTOR', 'correo@correodoctor.com');
INSERT INTO login ("password", "role", "email") VALUES ('DEF456', 'USER', 'correo@correouser.com');